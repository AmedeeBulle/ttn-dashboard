#######################################
#
# docker-compose.yml
#
# Main compose file
#
# Copyright (c) 2020 Philippe Vanhaesendonck
#
# Licensed under the Universal Permissive License v 1.0 as shown at
# https://oss.oracle.com/licenses/upl.
#
# SPDX-License-Identifier: UPL-1.0
#
# Define the following services:
# - Reverse proxy
#   - nginx: the NGINX proxy itself
#   - proxy-gen: generates the NGINX configuration dynamically
# - Dashboard
#   - node-red: Node-RED application with the TTN and InfluxDB nodes
#   - influxdb: InfluxDB timeseries database
#   - grafana: Grafana dashboard
#
# If you expose the Grafana/Node-RED services to the outside world, use the
# docker-compose-https.yml file in addition to this one to enable https and
# generate Let's Encrypt certificates.
#
#######################################

version: '3.5'
services:
  node-red:
    build: node-red
    image: node-red-ttn
    restart: unless-stopped
    depends_on:
      - influxdb
    volumes:
      - ttn_node_red:/data
    networks:
      - traefik
      - backend
    labels:
      - traefik.enable=true
      - traefik.http.routers.ttn-node-red.entryPoints=${TRAEFIK_EP_WEB:-web}
      - traefik.http.routers.ttn-node-red.rule=Host(`${TTN_NODE_RED_HOST:?Hostname for Node-RED is mandatory}`)
      - traefik.http.routers.ttn-node-red.service=ttn-node-red
      - traefik.http.routers.ttn-node-red.middlewares=ttn-node-red-auth
      - traefik.http.services.ttn-node-red.loadbalancer.server.port=1880
      - traefik.http.middlewares.ttn-node-red-auth.basicauth.users=${TTN_NODE_RED_CREDENTIALS:?Node-RED credentials are mandatory}

  influxdb:
    image: influxdb:1.8
    restart: unless-stopped
    volumes:
      - ttn_influxdb:/var/lib/influxdb
      - ttn_collectd:/etc/collectd
      - ./influxdb/types.db:/usr/share/collectd/types.db:ro
      - /srv/backup/influxdb:/backup
    networks:
      - backend
    environment:
      INFLUXDB_HTTP_AUTH_ENABLED: "true"
      # Following are only used at creation time
      INFLUXDB_DB: ${TTN_INFLUX_DB:-ttn}
      INFLUXDB_ADMIN_USER: ${TTN_INFLUX_ADMIN_USER:-ttn-admin}
      INFLUXDB_ADMIN_PASSWORD: ${TTN_INFLUX_ADMIN_PASSWORD:?InfluxDB Admin password is mandatory}
      INFLUXDB_USER: ${TTN_INFLUX_USER:-ttn-user}
      INFLUXDB_USER_PASSWORD: ${TTN_INFLUX_PASSWORD:?InfluxDB user password is mandatory}
      INFLUXDB_READ_USER: ${TTN_INFLUX_READ_USER:-ttn-read}
      INFLUXDB_READ_USER_PASSWORD: ${TTN_INFLUX_READ_PASSWORD:?InfluxDB read-only password is mandatory}
      # Control logging
      INFLUXDB_DATA_QUERY_LOG_ENABLED: "${TTN_INFLUXDB_DATA_QUERY_LOG_ENABLED:-true}"
      INFLUXDB_HTTP_LOG_ENABLED: "${TTN_INFLUXDB_HTTP_LOG_ENABLED:-true}"
      # Optionnal configuration for Collectd
      INFLUXDB_COLLECTD_ENABLED: "${TTN_INFLUXDB_COLLECTD_ENABLED:-false}"
      INFLUXDB_COLLECTD_DATABASE: ${TTN_INFLUX_COLLECT_DB:-ttn}
      INFLUXDB_COLLECTD_SECURITY_LEVEL: ${TTN_INFLUXDB_COLLECTD_SECURITY_LEVEL:-encrypt}
    ports:
      - "${TTN_INFLUXDB_BIND_ADDRESS:-127.0.0.1:25826}:25826/udp"

  grafana:
    image: grafana/grafana:6.5.2
    restart: unless-stopped
    depends_on:
      - influxdb
    volumes:
      - ttn_grafana:/var/lib/grafana
    networks:
      - traefik
      - backend
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${TTN_GRAFANA_ADMIN_PASSWORD:?Grafana Admin password is mandatory}
      # Logging
      GF_LOG_MODE: console
      GF_LOG_LEVEL: ${TTN_GRAFANA_LOG_LEVEL:-info}
    labels:
      - traefik.enable=true
      - traefik.http.routers.ttn-grafana.entryPoints=${TRAEFIK_EP_WEB:-web}
      - traefik.http.routers.ttn-grafana.rule=Host(`${TTN_GRAFANA_HOST:?Hostname for Grafana is mandatory}`)
      - traefik.http.routers.ttn-grafana.service=ttn-grafana
      - traefik.http.services.ttn-grafana.loadbalancer.server.port=3000

volumes:
  ttn_node_red:
  ttn_influxdb:
  ttn_collectd:
  ttn_grafana:

networks:
  traefik:
    external:
      name: ${TRAEFIK_NETWORK:-traefik}
  backend:

